// Code generated by go-enum
// DO NOT EDIT!

package max31865

import (
	"fmt"
)

const (
	// ModeManual is a Mode of type Manual
	ModeManual Mode = iota
	// ModeAutomatic is a Mode of type Automatic
	ModeAutomatic
)

const _ModeName = "ManualAutomatic"

var _ModeMap = map[Mode]string{
	0: _ModeName[0:6],
	1: _ModeName[6:15],
}

func (i Mode) String() string {
	if str, ok := _ModeMap[i]; ok {
		return str
	}
	return fmt.Sprintf("Mode(%d)", i)
}

var _ModeValue = map[string]Mode{
	_ModeName[0:6]:  0,
	_ModeName[6:15]: 1,
}

// ParseMode attempts to convert a string to a Mode
func ParseMode(name string) (Mode, error) {
	if x, ok := _ModeValue[name]; ok {
		return Mode(x), nil
	}
	return Mode(0), fmt.Errorf("%s is not a valid Mode", name)
}

const (
	// Wire2 is a Wire of type 2
	Wire2 Wire = iota
	// Wire3 is a Wire of type 3
	Wire3
	// Wire4 is a Wire of type 4
	Wire4
)

const _WireName = "234"

var _WireMap = map[Wire]string{
	0: _WireName[0:1],
	1: _WireName[1:2],
	2: _WireName[2:3],
}

func (i Wire) String() string {
	if str, ok := _WireMap[i]; ok {
		return str
	}
	return fmt.Sprintf("Wire(%d)", i)
}

var _WireValue = map[string]Wire{
	_WireName[0:1]: 0,
	_WireName[1:2]: 1,
	_WireName[2:3]: 2,
}

// ParseWire attempts to convert a string to a Wire
func ParseWire(name string) (Wire, error) {
	if x, ok := _WireValue[name]; ok {
		return Wire(x), nil
	}
	return Wire(0), fmt.Errorf("%s is not a valid Wire", name)
}
